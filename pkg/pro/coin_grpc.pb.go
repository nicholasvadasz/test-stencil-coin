// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: coin.proto

package pro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoinClient is the client API for Coin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinClient interface {
	ForwardTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error)
	ForwardBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error)
	// Establishes a one way connection to a node (may be reciprocated)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Empty, error)
	// Gets maximum 500 blocks past block with top hash
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	// Get a single block
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	// Sends know addresses to neighbors, forwarded from node to node
	SendAddresses(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*Empty, error)
	// Gets neighbor addresses from node (can be multicast with static addr_me)
	GetAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Addresses, error)
}

type coinClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinClient(cc grpc.ClientConnInterface) CoinClient {
	return &coinClient{cc}
}

func (c *coinClient) ForwardTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Coin/ForwardTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) ForwardBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Coin/ForwardBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Coin/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/Coin/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/Coin/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) SendAddresses(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Coin/SendAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) GetAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/Coin/GetAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinServer is the server API for Coin service.
// All implementations must embed UnimplementedCoinServer
// for forward compatibility
type CoinServer interface {
	ForwardTransaction(context.Context, *Transaction) (*Empty, error)
	ForwardBlock(context.Context, *Block) (*Empty, error)
	// Establishes a one way connection to a node (may be reciprocated)
	Version(context.Context, *VersionRequest) (*Empty, error)
	// Gets maximum 500 blocks past block with top hash
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	// Get a single block
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	// Sends know addresses to neighbors, forwarded from node to node
	SendAddresses(context.Context, *Addresses) (*Empty, error)
	// Gets neighbor addresses from node (can be multicast with static addr_me)
	GetAddresses(context.Context, *Empty) (*Addresses, error)
	mustEmbedUnimplementedCoinServer()
}

// UnimplementedCoinServer must be embedded to have forward compatible implementations.
type UnimplementedCoinServer struct {
}

func (UnimplementedCoinServer) ForwardTransaction(context.Context, *Transaction) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardTransaction not implemented")
}
func (UnimplementedCoinServer) ForwardBlock(context.Context, *Block) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardBlock not implemented")
}
func (UnimplementedCoinServer) Version(context.Context, *VersionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCoinServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedCoinServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedCoinServer) SendAddresses(context.Context, *Addresses) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAddresses not implemented")
}
func (UnimplementedCoinServer) GetAddresses(context.Context, *Empty) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (UnimplementedCoinServer) mustEmbedUnimplementedCoinServer() {}

// UnsafeCoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinServer will
// result in compilation errors.
type UnsafeCoinServer interface {
	mustEmbedUnimplementedCoinServer()
}

func RegisterCoinServer(s grpc.ServiceRegistrar, srv CoinServer) {
	s.RegisterService(&Coin_ServiceDesc, srv)
}

func _Coin_ForwardTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).ForwardTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coin/ForwardTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).ForwardTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_ForwardBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).ForwardBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coin/ForwardBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).ForwardBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coin/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coin/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coin/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_SendAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).SendAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coin/SendAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).SendAddresses(ctx, req.(*Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coin/GetAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).GetAddresses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Coin_ServiceDesc is the grpc.ServiceDesc for Coin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Coin",
	HandlerType: (*CoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardTransaction",
			Handler:    _Coin_ForwardTransaction_Handler,
		},
		{
			MethodName: "ForwardBlock",
			Handler:    _Coin_ForwardBlock_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Coin_Version_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Coin_GetBlocks_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _Coin_GetData_Handler,
		},
		{
			MethodName: "SendAddresses",
			Handler:    _Coin_SendAddresses_Handler,
		},
		{
			MethodName: "GetAddresses",
			Handler:    _Coin_GetAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}
